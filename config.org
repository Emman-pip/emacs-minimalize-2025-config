#+TITLE: Init org mode file
#+DESCRIPTION: A init file for giving emacs another try
#+AUTHOR: Emman-pip

* My config

** Customizations
*** Removing ugly defaults
#+NAME: Remove ugly defaults
#+BEGIN_SRC elisp
    ;; to remove the ugly defaults
    (menu-bar-mode 0)
    (tool-bar-mode 0)
    (scroll-bar-mode 0)
    (set-face-attribute 'default nil :height 160)
  (setq backup-directory-alist '(("." . "~/.emacs.d/tmp")))
(global-auto-revert-mode)

#+END_SRC

*** Custom functions (interactive)
#+NAME: custom-functions
#+BEGIN_SRC elisp
  ;; line numbers
  (defun lines()
    "A command to enable relative line numbers."
    (interactive)
    (display-line-numbers-mode)
    (menu-bar--display-line-numbers-mode-relative)
    (line-number-mode)
    )

  (defun my-code-block(language block-name)
    "A custom function to insert code blocks in org mode, \ninvoke using 'C-u M-x'"
    (interactive "Mlanguage: \nMcode-block-name: ")
    (insert (concat "#+NAME: " block-name))
    (insert (concat "\n#+BEGIN_SRC " language))
    (insert "\n\n#+END_SRC")
    )

#+END_SRC

*** IDK, custom variables
#+NAME: custom-variables
#+BEGIN_SRC elisp
  (setq custom-file (locate-user-emacs-file "custom_vars.el"))
  (load-file (locate-user-emacs-file "custom_vars.el"))
#+END_SRC


*** Custom theme
#+NAME: custom theme
#+BEGIN_SRC elisp
    ;; theme
    ;; (use-package gruvbox-theme
    ;;   :ensure
    ;;   :init
    ;;   (load-theme 'gruvbox-dark-medium))
  (use-package modus-themes
    :ensure t
    :init
    (load-theme 'modus-vivendi))

#+END_SRC

*** Eglot stuff
#+NAME: eglot-keybindings
#+BEGIN_SRC elisp
  ;; to use with bindings
  ;; flymake-goto-next-error
  ;; flymake-goto-prev-error
  (add-hook 'flymake-mode-hook
	    (lambda() (local-set-key (kbd "M-n") 'flymake-goto-next-error)))
  (add-hook 'flymake-mode-hook
	    (lambda() (local-set-key (kbd "M-p") 'flymake-goto-prev-error)))

  ;; add eglot hook to python-mode
  (keymap-global-set "M-o" 'emmet-preview)
#+END_SRC

*** Plugins
**** Melpa repository
#+NAME: Melpa
#+BEGIN_SRC elisp
  (require 'use-package)

  ;; melpa
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  ;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  ;; (package-initialize)
#+END_SRC

**** Evil mode
#+NAME: evil-mode
#+BEGIN_SRC elisp
  (use-package evil
    :ensure t
    :config
    (setq evil-want-integration 1)
    (setq evil-want-C-u-scroll 1)
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    ;; (setq evil-undo-system 'undo-tree)
    (setq evil-want-keybinding nil)
    ;; :hook
    ;; ('prog-mode . 'evil-local-mode)
    )
  ;; (add-hook 'prog-mode-hook 'evil-local-mode)
#+END_SRC

*** Python stuff
#+NAME: python eglotn
#+BEGIN_SRC elisp
  ;; (add-hook 'python-mode-hook 'eglot-ensure)
  ;; elpy
  (use-package elpy
    :ensure t)

  ;; for org-mode python
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t) (java . t))
   )


#+END_SRC

*** Express JS support
#+NAME: express config
#+BEGIN_SRC elisp
  (use-package pug-mode
    :ensure t
    )

  (use-package jade-mode
    :ensure t
    )

  (add-to-list 'auto-mode-alist '("\\.pug\\'" . pug-mode))
  (add-to-list 'auto-mode-alist '("\\.jade\\'" . jade-mode))

  (add-hook 'javascript-mode-hook 'eglot-ensure)
#+END_SRC

*** Emmet support to PHP, HTML...
#+NAME: Emmet support
#+BEGIN_SRC elisp
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'php-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'emmet-mode)
    ;; (add-hook 'web-mode-hook 'emmet-preview-mode)
    ;; (add-hook 'php-mode-hook 'emmet-preview-mode)
    (add-hook 'web-mode-hook 'company-mode)
    (add-hook 'php-mode-hook 'company-mode)
    )
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  (use-package lsp-mode
    :ensure t
    :config
    (add-hook 'php-mode-hook 'lsp-mode)
    )
  (use-package php-mode
    :ensure t
    :config

    (add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode))
    )
#+END_SRC

*** Terminal
#+NAME: Vterm-config
#+BEGIN_SRC elisp
  (use-package vterm
    :ensure t
    )
  (use-package multi-vterm
    :ensure t)
#+END_SRC

*** Additional Plugins
**** Magit
#+NAME: Magit
#+BEGIN_SRC elisp
  (use-package magit
    :ensure t)

#+END_SRC

**** Golden ratio
#+NAME: golden ratio
#+BEGIN_SRC elisp
  ;; golden-ratio

  ;; (use-package golden-ratio
  ;;   :ensure t
  ;;   :init
  ;;   (golden-ratio-mode))

#+END_SRC

**** Dashboard
#+NAME: Dashboard
#+BEGIN_SRC elisp
  ;; dashboard
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    ;; (setq initial-buffer-choice (lambda()(get-buffer *dashboard*)))
    (setq dashboard-startup-banner 'logo)
    ;; (setq dashboard-startup-banner "~/Pictures/Wallpapers/archlinux-icon-2048x2048-q7549ths.png")
    )
  (setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))
#+END_SRC


**** General.el
#+NAME: General.el
#+BEGIN_SRC elisp
  (use-package general
    :ensure t)
#+END_SRC
    
**** Smart parens
#+NAME: smartparens
#+BEGIN_SRC elisp
  (use-package smartparens
    :ensure smartparens  ;; install the package
    ;; :hook (prog-mode text-mode markdown-mode) ;; add `smartparens-mode` to these hooks
    :config
    ;; load default config
    (require 'smartparens-config)

    :init
    (smartparens-global-mode)
    )
#+END_SRC

**** EXWM
#+NAME: EXWM
#+BEGIN_SRC elisp
  ;; (use-package exwm
  ;;   :ensure t
  ;;   :config
  ;;   (require 'exwm)
  ;;   (exwm-enable)
  ;;   )

  ;; (display-battery-mode)

#+END_SRC

**** ACE WINDOW
#+NAME: ace
#+BEGIN_SRC elisp
  (use-package ace-window
    :ensure t
    ;; (global-set-key (kbd "C-x o") 'ace-window)
  )
#+END_SRC


**** Ivy/counsel
#+NAME: ivy/counsel
#+BEGIN_SRC elisp
  (use-package ivy
    :ensure t

    :config

    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    ;; (global-set-key "\C-s" 'swiper)
    ;; (global-set-key (kbd "C-c C-r") 'ivy-resume)
    ;; (global-set-key (kbd "<f6>") 'ivy-resume)
    ;; (global-set-key (kbd "M-x") 'counsel-M-x)
    ;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    ;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    ;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    ;; (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    ;; (global-set-key (kbd "<f1> l") 'counsel-find-library)
    ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    ;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    ;; (global-set-key (kbd "C-c g") 'counsel-git)
    ;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
    ;; (global-set-key (kbd "C-c k") 'counsel-ag)
    ;; (global-set-key (kbd "C-x l") 'counsel-locate)
    ;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    ;; (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    :init
    (ivy-mode)
    )
#+END_SRC

**** Org mode stuff
#+NAME: orgmode
#+BEGIN_SRC elisp
(add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC

**** Expand region
#+NAME: expand region
#+BEGIN_SRC elisp
(use-package expand-region
  :ensure t
  :bind
  ("M-=" . er/expand-region)
  ("M-'" . er/mark-inside-quotes)
  ("M-]" . er/mark-inside-pairs)
  )
#+END_SRC

**** Snippets
#+NAME: yas
#+BEGIN_SRC elisp
  ;; (use-package yasnippet
    ;; :ensure t
    ;; :bind
    ;; ("M-s" . yas-insert-snippet)
    ;; )

  ;; (yas-reload-all)
  ;; (add-hook 'prog-mode-hook #'yas-minor-mode)


#+END_SRC

**** Multiple cursors
#+NAME: multi cursor
#+BEGIN_SRC elisp
    (use-package multiple-cursors
      :ensure t
    :bind
    ("M-SPC" . set-rectangular-region-anchor)
      )
#+END_SRC
